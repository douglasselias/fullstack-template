{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nexport var AddTaskInteractor = /*#__PURE__*/function () {\n  function AddTaskInteractor(repository, idGenerator) {\n    _classCallCheck(this, AddTaskInteractor);\n\n    this.repository = repository;\n    this.idGenerator = idGenerator;\n  }\n\n  _createClass(AddTaskInteractor, [{\n    key: \"add\",\n    value: function () {\n      var _add = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(description) {\n        var task;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.idGenerator.generate();\n\n              case 2:\n                _context.t0 = _context.sent;\n                _context.t1 = description;\n                task = {\n                  id: _context.t0,\n                  description: _context.t1,\n                  isDone: false\n                };\n                _context.next = 7;\n                return this.repository.add(task);\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function add(_x) {\n        return _add.apply(this, arguments);\n      }\n\n      return add;\n    }()\n  }]);\n\n  return AddTaskInteractor;\n}();","map":{"version":3,"sources":["/home/douglas/Projetos/fullstack-template/use-cases/add-task/add-task.interactor.ts"],"names":["AddTaskInteractor","repository","idGenerator","description","generate","task","id","isDone","add"],"mappings":";;;;AAMA,WAAaA,iBAAb;AACE,6BACmBC,UADnB,EAEmBC,WAFnB,EAGE;AAAA;;AAAA,SAFiBD,UAEjB,GAFiBA,UAEjB;AAAA,SADiBC,WACjB,GADiBA,WACjB;AAAE;;AAJN;AAAA;AAAA;AAAA,2FAMYC,WANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAQgB,KAAKD,WAAL,CAAiBE,QAAjB,EARhB;;AAAA;AAAA;AAAA,8BASMD,WATN;AAOUE,gBAAAA,IAPV;AAQMC,kBAAAA,EARN;AASMH,kBAAAA,WATN;AAUMI,kBAAAA,MAVN,EAUc;AAVd;AAAA;AAAA,uBAaU,KAAKN,UAAL,CAAgBO,GAAhB,CAAoBH,IAApB,CAbV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA","sourcesContent":["import { Task } from '@/entities'\n\nimport { AddTaskUseCase } from './add-task.usecase'\nimport { AddTaskRepository } from './add-task.repository'\nimport { IdGenerator } from './id-generator.infra'\n\nexport class AddTaskInteractor implements AddTaskUseCase {\n  constructor(\n    private readonly repository: AddTaskRepository,\n    private readonly idGenerator: IdGenerator\n  ) {}\n\n  async add(description: string): Promise<void> {\n    const task: Task = {\n      id: await this.idGenerator.generate(),\n      description,\n      isDone: false,\n    }\n\n    await this.repository.add(task)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}