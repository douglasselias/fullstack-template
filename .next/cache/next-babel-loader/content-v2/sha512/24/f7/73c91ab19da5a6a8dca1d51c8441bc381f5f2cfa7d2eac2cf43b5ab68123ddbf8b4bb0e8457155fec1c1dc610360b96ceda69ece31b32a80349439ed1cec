{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { ListTasksLocalStorage } from '@/use-cases/list-tasks/list-tasks.localstorage';\nexport var ToggleIsDoneTaskLocalStorage = /*#__PURE__*/function () {\n  function ToggleIsDoneTaskLocalStorage() {\n    _classCallCheck(this, ToggleIsDoneTaskLocalStorage);\n  }\n\n  _createClass(ToggleIsDoneTaskLocalStorage, [{\n    key: \"toggle\",\n    value: function () {\n      var _toggle = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(id) {\n        var repository, tasks, task;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                repository = new ListTasksLocalStorage();\n                _context.next = 3;\n                return repository.list();\n\n              case 3:\n                tasks = _context.sent;\n                task = tasks.find(function (task) {\n                  return task.id === id;\n                });\n                task.isDone = !task.isDone;\n                localStorage.setItem('tasks', JSON.stringify(tasks));\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function toggle(_x) {\n        return _toggle.apply(this, arguments);\n      }\n\n      return toggle;\n    }()\n  }]);\n\n  return ToggleIsDoneTaskLocalStorage;\n}();","map":{"version":3,"sources":["/home/douglas/Projetos/fullstack-template/use-cases/toggle-is-done-task/toggle-is-done-task.localstorage.ts"],"names":["ListTasksLocalStorage","ToggleIsDoneTaskLocalStorage","id","repository","list","tasks","task","find","isDone","localStorage","setItem","JSON","stringify"],"mappings":";;;;AAAA,SAASA,qBAAT,QAAsC,gDAAtC;AAGA,WAAaC,4BAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,8FAEeC,EAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAGUC,gBAAAA,UAHV,GAGuB,IAAIH,qBAAJ,EAHvB;AAAA;AAAA,uBAIwBG,UAAU,CAACC,IAAX,EAJxB;;AAAA;AAIUC,gBAAAA,KAJV;AAMUC,gBAAAA,IANV,GAMiBD,KAAK,CAACE,IAAN,CAAW,UAACD,IAAD;AAAA,yBAAUA,IAAI,CAACJ,EAAL,KAAYA,EAAtB;AAAA,iBAAX,CANjB;AAOII,gBAAAA,IAAI,CAACE,MAAL,GAAc,CAACF,IAAI,CAACE,MAApB;AAEAC,gBAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BC,IAAI,CAACC,SAAL,CAAeP,KAAf,CAA9B;;AATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA","sourcesContent":["import { ListTasksLocalStorage } from '@/use-cases/list-tasks/list-tasks.localstorage'\nimport { ToggleIsDoneTaskRepository } from './toggle-is-done-task.repository'\n\nexport class ToggleIsDoneTaskLocalStorage\n  implements ToggleIsDoneTaskRepository {\n  async toggle(id: string): Promise<void> {\n    const repository = new ListTasksLocalStorage()\n    const tasks = await repository.list()\n\n    const task = tasks.find((task) => task.id === id)\n    task.isDone = !task.isDone\n\n    localStorage.setItem('tasks', JSON.stringify(tasks))\n  }\n}\n"]},"metadata":{},"sourceType":"module"}